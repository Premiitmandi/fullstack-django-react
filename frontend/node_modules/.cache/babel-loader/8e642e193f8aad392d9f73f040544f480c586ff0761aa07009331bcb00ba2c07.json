{"ast":null,"code":"\n// import React, { useState, useEffect } from \"react\";\n// import \"./App.css\";\n\n// const App = () => {\n//   const [search, setSearch] = useState(\"\");\n//   const [data, setData] = useState([]); // Store backend data\n//   const [loading, setLoading] = useState(true); // Show loading state\n//   const [error, setError] = useState(null); // Handle errors\n\n//   // Fetch data from backend when the component mounts\n//   useEffect(() => {\n//     fetch(\"http://127.0.0.1:8000/api/items/\") // Replace with your actual API endpoint\n//       .then((response) => {\n//         if (!response.ok) {\n//           throw new Error(\"Failed to fetch data\");\n//         }\n//         return response.json();\n//       })\n//       .then((backendData) => {\n//         setData(backendData); // Store fetched data in state\n//         setLoading(false);\n//       })\n//       .catch((error) => {\n//         setError(error.message);\n//         setLoading(false);\n//       });\n//   }, []);\n\n//   // Filter data based on search input\n//   const filteredData = data.filter(\n//     (item) =>\n//       item.name.toLowerCase().includes(search.toLowerCase()) ||\n//       item.category.toLowerCase().includes(search.toLowerCase())\n//   );\n\n//   return (\n//     <div>\n//       <h1>Item Dashboard</h1>\n//       <input\n//         type=\"text\"\n//         placeholder=\"Search by name or category...\"\n//         value={search}\n//         onChange={(e) => setSearch(e.target.value)}\n//       />\n\n//       {/* Show loading message */}\n//       {loading && <p>Loading data...</p>}\n\n//       {/* Show error message if fetch fails */}\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\n\n//       {/* Display data only if no errors and not loading */}\n//       {!loading && !error && (\n//         <table border=\"1\">\n//           <thead>\n//             <tr>\n//               <th>Name</th>\n//               <th>Category</th>\n//               <th>Description</th>\n//             </tr>\n//           </thead>\n//           <tbody>\n//             {filteredData.length > 0 ? (\n//               filteredData.map((item) => (\n//                 <tr key={item.id}>\n//                   <td>{item.name}</td>\n//                   <td>{item.category}</td>\n//                   <td>{item.description}</td>\n//                 </tr>\n//               ))\n//             ) : (\n//               <tr>\n//                 <td colSpan=\"3\" style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\n//                   No items found\n//                 </td>\n//               </tr>\n//             )}\n//           </tbody>\n//         </table>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default App;","map":{"version":3,"names":[],"sources":["C:/Users/prati/OneDrive/Desktop/myproject/frontend/src/App.js"],"sourcesContent":["\r\n// import React, { useState, useEffect } from \"react\";\r\n// import \"./App.css\";\r\n\r\n// const App = () => {\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [data, setData] = useState([]); // Store backend data\r\n//   const [loading, setLoading] = useState(true); // Show loading state\r\n//   const [error, setError] = useState(null); // Handle errors\r\n\r\n//   // Fetch data from backend when the component mounts\r\n//   useEffect(() => {\r\n//     fetch(\"http://127.0.0.1:8000/api/items/\") // Replace with your actual API endpoint\r\n//       .then((response) => {\r\n//         if (!response.ok) {\r\n//           throw new Error(\"Failed to fetch data\");\r\n//         }\r\n//         return response.json();\r\n//       })\r\n//       .then((backendData) => {\r\n//         setData(backendData); // Store fetched data in state\r\n//         setLoading(false);\r\n//       })\r\n//       .catch((error) => {\r\n//         setError(error.message);\r\n//         setLoading(false);\r\n//       });\r\n//   }, []);\r\n\r\n//   // Filter data based on search input\r\n//   const filteredData = data.filter(\r\n//     (item) =>\r\n//       item.name.toLowerCase().includes(search.toLowerCase()) ||\r\n//       item.category.toLowerCase().includes(search.toLowerCase())\r\n//   );\r\n\r\n//   return (\r\n//     <div>\r\n//       <h1>Item Dashboard</h1>\r\n//       <input\r\n//         type=\"text\"\r\n//         placeholder=\"Search by name or category...\"\r\n//         value={search}\r\n//         onChange={(e) => setSearch(e.target.value)}\r\n//       />\r\n\r\n//       {/* Show loading message */}\r\n//       {loading && <p>Loading data...</p>}\r\n\r\n//       {/* Show error message if fetch fails */}\r\n//       {error && <p style={{ color: \"red\" }}>Error: {error}</p>}\r\n\r\n//       {/* Display data only if no errors and not loading */}\r\n//       {!loading && !error && (\r\n//         <table border=\"1\">\r\n//           <thead>\r\n//             <tr>\r\n//               <th>Name</th>\r\n//               <th>Category</th>\r\n//               <th>Description</th>\r\n//             </tr>\r\n//           </thead>\r\n//           <tbody>\r\n//             {filteredData.length > 0 ? (\r\n//               filteredData.map((item) => (\r\n//                 <tr key={item.id}>\r\n//                   <td>{item.name}</td>\r\n//                   <td>{item.category}</td>\r\n//                   <td>{item.description}</td>\r\n//                 </tr>\r\n//               ))\r\n//             ) : (\r\n//               <tr>\r\n//                 <td colSpan=\"3\" style={{ textAlign: \"center\", fontWeight: \"bold\" }}>\r\n//                   No items found\r\n//                 </td>\r\n//               </tr>\r\n//             )}\r\n//           </tbody>\r\n//         </table>\r\n//       )}\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default App;\r\n"],"mappings":";AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}